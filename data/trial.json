[
  {
    "id": 1,
    "instruction": "প্রথম n সংখ্যার ক্ষুদ্রতম গুণিতক খুঁজে বের করার জন্য একটি ফাংশন লিখুন।",
    "response": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
  },
  {
    "id": 2,
    "instruction": "সাধারণ কীগুলির জন্য মান যোগ করে দুটি অভিধানকে একত্রিত করার জন্য একটি ফাংশন লিখুন।",
    "response": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
  },
  {
    "id": 3,
    "instruction": "১ থেকে এন পর্যন্ত মোট আনসেট বিট গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।",
    "response": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
  },
  {
    "id": 4,
    "instruction": "একটি ফাংশন লিখুন যা প্রদত্ত সংখ্যাটি এমনকি হলে সত্য ফেরত দেয় অন্যথায় মিথ্যা ফেরত দেয়।",
    "response": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
  },
  {
    "id": 5,
    "instruction": "দ্বিপদী সহগগুলির বর্গক্ষেত্রের যোগফল খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।",
    "response": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
  },
  {
    "id": 6,
    "instruction": "রেজেক্স ব্যবহার করে একটি ইউআরএল থেকে বছর, মাস এবং তারিখ বের করার জন্য একটি ফাংশন লিখুন।",
    "response": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
  },
  {
    "id": 7,
    "instruction": "প্রথম n টি ভাগ্যবান সংখ্যা প্রিন্ট করার জন্য একটি ফাংশন লিখুন।",
    "response": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
  },
  {
    "id": 8,
    "instruction": "প্রদত্ত অ্যারেতে স্থির বিন্দু খুঁজে পেতে একটি ফাংশন লিখুন।",
    "response": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
  },
  {
    "id": 9,
    "instruction": "একটি নির্দিষ্ট সংখ্যার পূর্ববর্তী প্যালিনড্রোম খুঁজে পেতে একটি ফাংশন লিখুন।",
    "response": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
  },
  {
    "id": 10,
    "instruction": "একটি গ্রেগরিয়ান তারিখ বৈধ করার জন্য একটি ফাংশন লিখুন।",
    "response": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
  },
  {
    "id": 11,
    "instruction": "হিপ ক্যু অ্যালগরিদম ব্যবহার করে পূর্ণসংখ্যার একটি অ্যারের তিনটি সংখ্যার সর্বোচ্চ উৎপাদনের জন্য একটি ফাংশন লিখুন।",
    "response": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
  },
  {
    "id": 12,
    "instruction": "ln, m lobb সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।",
    "response": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
  },
  {
    "id": 13,
    "instruction": "একটি স্ট্রিংয়ের শেষে একটি সংখ্যা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।",
    "response": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
  },
  {
    "id": 14,
    "instruction": "প্রদত্ত স্ট্রিং দুটি বিকল্প অক্ষর দিয়ে তৈরি কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।",
    "response": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
  },
  {
    "id": 15,
    "instruction": "ল্যাম্বদা ফাংশন ব্যবহার করে একটি প্রদত্ত অ্যারেতে ধনাত্মক এবং নেতিবাচক সংখ্যাগুলি পুনরায় সাজানোর জন্য একটি ফাংশন লিখুন।",
    "response": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
  },
  {
    "id": 16,
    "instruction": "একটি ফাংশন লিখুন যাতে আপনি খুঁজে পান যে অ্যারেতে একটি ট্রিপলেট আছে যার যোগফল একটি প্রদত্ত মানের সমান।",
    "response": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
  },
  {
    "id": 17,
    "instruction": "একটি বড় হাতের অক্ষর এবং তারপরে ছোট হাতের অক্ষরের ক্রম খুঁজে বের করার জন্য একটি ফাংশন লিখুন।",
    "response": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
  },
  {
    "id": 18,
    "instruction": "মুদ্রা পরিবর্তনের জন্য একটি ফাংশন লিখুন।",
    "response": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
  },
  {
    "id": 19,
    "instruction": "একটি পাইথন ফাংশন লিখুন যাতে তালিকার সব আইটেমকে গুণ করা যায়।",
    "response": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
  },
  {
    "id": 20,
    "instruction": "একটি ফাংশন লিখুন যাতে প্রদত্ত টিপল তালিকায় সমস্ত শূন্য মান সহ সমস্ত টিপলগুলি সরিয়ে ফেলা যায়।",
    "response": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
  },
  {
    "id": 21,
    "instruction": "একটি ফাংশন লিখুন যাতে n আকারের প্রতিটি টুপলকে চুনক করা যায়।",
    "response": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
  },
  {
    "id": 22,
    "instruction": "একটি প্রদত্ত পূর্ণসংখ্যা অ্যারে থেকে সর্বোচ্চ উৎপাদনের সাথে একটি জোড়া খুঁজে পেতে একটি ফাংশন লিখুন।",
    "response": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
  },
  {
    "id": 23,
    "instruction": "একটি ফাংশন লিখুন যাতে সবচেয়ে ছোট স্ট্রিং এর দৈর্ঘ্য খুঁজে পাওয়া যায় যার মধ্যে str1 এবং str2 উভয়ই সাবসেকভেন্স হিসাবে থাকে।",
    "response": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
  },
  {
    "id": 24,
    "instruction": "একটি ফাংশন লিখুন যাতে দুইটি সংখ্যার সর্বোচ্চ সংখ্যা পাওয়া যায়।",
    "response": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
  },
  {
    "id": 25,
    "instruction": "একটি প্রদত্ত টুপলের সমস্ত সংখ্যার গুণফল গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।",
    "response": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
  },
  {
    "id": 26,
    "instruction": "n-তম rencontres সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।",
    "response": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
  },
  {
    "id": 27,
    "instruction": "প্রদত্ত বাইনারি গাছের উচ্চতা গণনা করার জন্য একটি ফাংশন লিখুন।",
    "response": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
  },
  {
    "id": 28,
    "instruction": "একটি ফাংশন লিখুন যাতে yyyy-mm-dd ফরম্যাটের একটি তারিখ dd-mm-yyyy ফরম্যাটে রূপান্তর করা যায়।",
    "response": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
  },
  {
    "id": 29,
    "instruction": "একটি টুপলের পুনরাবৃত্ত আইটেম গণনা করার জন্য একটি ফাংশন লিখুন।",
    "response": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
  },
  {
    "id": 30,
    "instruction": "একটি ফাংশন লিখুন যা একটি স্ট্রিং এর সাথে মিলবে যার মধ্যে একটি a আছে যার পরে শূন্য বা আরও b আছে regex ব্যবহার করে।",
    "response": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
  },
  {
    "id": 31,
    "instruction": "13+23+33+....+n3 সিরিজের যোগফল গণনা করার জন্য একটি ফাংশন লিখুন।",
    "response": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
  },
  {
    "id": 32,
    "instruction": "একটি প্রদত্ত স্ট্রিং তালিকা থেকে ডুপ্লিকেট শব্দ অপসারণের জন্য একটি ফাংশন লিখুন।",
    "response": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
  },
  {
    "id": 33,
    "instruction": "একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে উট কেস স্ট্রিংকে সাপ কেস স্ট্রিংয়ে রূপান্তর করে।",
    "response": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
  },
  {
    "id": 34,
    "instruction": "nth ডেলানয় সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।",
    "response": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
  },
  {
    "id": 35,
    "instruction": "সিরিজ 12+22+32+....+n2 এর যোগফল গণনা করার জন্য একটি ফাংশন লিখুন।",
    "response": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
  },
  {
    "id": 36,
    "instruction": "প্রদত্ত ক্রমিক তালিকার উপর ভিত্তি করে প্রদত্ত টুপলগুলিকে পুনরায় সাজানোর জন্য একটি ফাংশন লিখুন।",
    "response": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
  },
  {
    "id": 37,
    "instruction": "একটি প্রদত্ত স্ট্রিংয়ের সবচেয়ে সাধারণ অক্ষর গণনা করার জন্য একটি ফাংশন লিখুন।",
    "response": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
  },
  {
    "id": 38,
    "instruction": "তিনটি সাজানো অ্যারে থেকে তিনটি নিকটতম উপাদান খুঁজে পেতে একটি ফাংশন লিখুন।",
    "response": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
  },
  {
    "id": 39,
    "instruction": "ল্যাম্বদা ফাংশন ব্যবহার করে অভিধানের তালিকা সাজানোর জন্য একটি ফাংশন লিখুন।",
    "response": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
  },
  {
    "id": 40,
    "instruction": "একটি ফাংশন লিখুন যা হিপ সোর্ট ব্যবহার করে প্রদত্ত অ্যারে বাছাই করে।",
    "response": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
  },
  {
    "id": 41,
    "instruction": "একটি ফাংশন লিখুন যাতে একটি তালিকার উপাদানগুলি গণনা করা যায় যতক্ষণ না একটি উপাদান একটি টুপল হয়।",
    "response": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
  },
  {
    "id": 42,
    "instruction": "প্রদত্ত তালিকায় কোন তালিকা উপাদান উপস্থিত আছে কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।",
    "response": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
  },
  {
    "id": 43,
    "instruction": "heapq মডিউল ব্যবহার করে দুটি প্রদত্ত বাছাই করা তালিকা একত্রিত করার জন্য একটি ফাংশন লিখুন।",
    "response": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
  },
  {
    "id": 44,
    "instruction": "একটি প্রদত্ত স্ট্রিং এর সংখ্যা এবং তাদের অবস্থান পৃথক এবং মুদ্রণ করার জন্য একটি ফাংশন লিখুন।",
    "response": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
  },
  {
    "id": 45,
    "instruction": "প্রদত্ত টুপলগুলিকে সেটে রূপান্তর করার জন্য একটি ফাংশন লিখুন।",
    "response": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
  },
  {
    "id": 46,
    "instruction": "একটি নির্দিষ্ট পাঠ্যের সবচেয়ে সাধারণ উপাদান এবং তাদের গণনা খুঁজে পেতে একটি ফাংশন লিখুন।",
    "response": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
  },
  {
    "id": 47,
    "instruction": "সবচেয়ে ছোট শব্দের দৈর্ঘ্য খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।",
    "response": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
  },
  {
    "id": 48,
    "instruction": "একটি টুপেলের একটি আইটেম পেতে একটি ফাংশন লিখুন।",
    "response": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
  },
  {
    "id": 49,
    "instruction": "একটি ফাংশন লিখুন যা প্রদত্ত টিপল তালিকার ভিত্তিতে টিপলের মোট সংখ্যা সাজায়।",
    "response": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
  },
  {
    "id": 50,
    "instruction": "প্রদত্ত বছরের জন্য চীনা রাশিচক্রের চিহ্ন প্রদর্শন করার জন্য একটি ফাংশন লিখুন।",
    "response": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
  },
  {
    "id": 51,
    "instruction": "একটি ফাংশন লিখুন যাতে দুটি তালিকার মধ্যে একই রকম সূচকের সর্বোচ্চ সংখ্যা পাওয়া যায়।",
    "response": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
  },
  {
    "id": 52,
    "instruction": "ncr mod p এর মান গণনা করার জন্য একটি ফাংশন লিখুন।",
    "response": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
  },
  {
    "id": 53,
    "instruction": "একটি পাইথন ফাংশন লিখুন যাতে স্বতন্ত্র উপাদানগুলির সাথে উপসেটগুলির সর্বনিম্ন সংখ্যা খুঁজে পাওয়া যায়।",
    "response": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
  },
  {
    "id": 54,
    "instruction": "একটি ফাংশন লিখুন যা লাভের পরিমাণ দেয় যদি প্রদত্ত পরিমাণে লাভ থাকে অন্যথায় কোনটিই ফেরত দেয় না।",
    "response": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
  },
  {
    "id": 55,
    "instruction": "একটি ফাংশন লিখুন, যেটা দিয়ে আমরা জানতে পারি যে, প্রদত্ত সংখ্যাটি প্রচুর পরিমাণে আছে কিনা।",
    "response": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
  },
  {
    "id": 56,
    "instruction": "রেজেক্স ব্যবহার করে বড় অক্ষরে প্রদত্ত স্ট্রিংকে বিভক্ত করার জন্য একটি ফাংশন লিখুন।",
    "response": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
  },
  {
    "id": 57,
    "instruction": "ডানদিকের সেট বিটের অবস্থান পেতে একটি পাইথন ফাংশন লিখুন।",
    "response": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
  },
  {
    "id": 58,
    "instruction": "একটি পূর্ণসংখ্যাকে রোমান সংখ্যায় রূপান্তর করার জন্য একটি ফাংশন লিখুন।",
    "response": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
  },
  {
    "id": 59,
    "instruction": "একটি তালিকা গড় খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।",
    "response": "def Average(lst): \r\n    return sum(lst) / len(lst) "
  },
  {
    "id": 60,
    "instruction": "টাইলিং সমস্যা সমাধানের জন্য একটি ফাংশন লিখুন।",
    "response": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
  },
  {
    "id": 61,
    "instruction": "একটি রোমান সংখ্যাকে একটি পূর্ণসংখ্যায় রূপান্তর করার জন্য একটি ফাংশন লিখুন।",
    "response": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
  },
  {
    "id": 62,
    "instruction": "l এবং r এর মধ্যে সমস্ত সম প্রাকৃতিক সংখ্যার যোগফল খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।",
    "response": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
  },
  {
    "id": 63,
    "instruction": "ডিসক্রিমিন্যান্ট মান গণনা করার জন্য একটি ফাংশন লিখুন।",
    "response": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
  },
  {
    "id": 64,
    "instruction": "একটি পাইথন ফাংশন লিখুন যাতে শব্দটির দৈর্ঘ্য সমান হয় কিনা তা পরীক্ষা করা যায়।",
    "response": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
  },
  {
    "id": 65,
    "instruction": "একটি ফাংশন লিখুন যা উট কেস স্ট্রিংকে সাপ কেস স্ট্রিংয়ে রূপান্তর করে।",
    "response": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
  },
  {
    "id": 66,
    "instruction": "একটি ফাংশন লিখুন যা একটি তালিকার একটি খালি টিপলকে সরিয়ে দেয়।",
    "response": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
  },
  {
    "id": 67,
    "instruction": "একটি পাইথন ফাংশন লিখুন যাতে স্ট্রিংগুলিকে গ্রহণ করা যায় যাতে সমস্ত স্বরবর্ণ থাকে।",
    "response": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
  },
  {
    "id": 68,
    "instruction": "প্রদত্ত পর্যায়ক্রমিক ফাংশনের সর্বোচ্চ সম্ভাব্য মান খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।",
    "response": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
  },
  {
    "id": 69,
    "instruction": "যদি টুপলগুলির একই রকম প্রাথমিক উপাদান থাকে তবে তাদের যোগ করার জন্য একটি ফাংশন লিখুন।",
    "response": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
  },
  {
    "id": 70,
    "instruction": "একটি ফাংশন লিখুন যাতে দুইটি সংখ্যার সর্বনিম্ন সংখ্যা পাওয়া যায়।",
    "response": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
  },
  {
    "id": 71,
    "instruction": "একটি ফাংশন লিখুন যা a, b এবং c দৈর্ঘ্যের সেগমেন্টের সর্বোচ্চ সংখ্যা খুঁজে বের করে যা n থেকে গঠিত হতে পারে।",
    "response": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
  },
  {
    "id": 72,
    "instruction": "একটি ফাংশন লিখুন যা দেওয়া দুটি টিপলকে একটি নেস্টেড টিপলে সংযুক্ত করে।",
    "response": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
  },
  {
    "id": 73,
    "instruction": "একটি পাইথন ফাংশন লিখুন যা স্ট্রিংকে বাম দিকে ঘোরায়।",
    "response": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
  },
  {
    "id": 74,
    "instruction": "প্রদত্ত ত্রিভুজটির সর্বনিম্ন মোট পথের যোগফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।",
    "response": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
  }
]